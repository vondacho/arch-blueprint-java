{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"arch blueprint java \u00b6 A Java project as template and pedagogical support for the teaching of Clean Architecture crafting practice. Features \u00b6 CRUD operations on Customer entities exposed by a REST API. Web request validation with Swagger request validator Web security based on Basic Authentication Application management with Spring Actuator Acceptance testing with Cucumber Contract testing with Pact and Spring Cloud Contract Architecture testing with ArchUnit Getting started \u00b6 Build the project with ./gradlew clean build . Start the database with docker-compose up . Launch the application with ./gradlew bootRun --args='--spring.profiles.active=test,jpa,postgres' . Play use cases with Postman using this default collection or with Swagger UI . This documentation \u00b6 Powered by MkDocs API documentation powered by Swagger UI Architecture documentation powered by Structurizr and AppMap","title":"Home"},{"location":"#arch-blueprint-java","text":"A Java project as template and pedagogical support for the teaching of Clean Architecture crafting practice.","title":"arch blueprint java"},{"location":"#features","text":"CRUD operations on Customer entities exposed by a REST API. Web request validation with Swagger request validator Web security based on Basic Authentication Application management with Spring Actuator Acceptance testing with Cucumber Contract testing with Pact and Spring Cloud Contract Architecture testing with ArchUnit","title":"Features"},{"location":"#getting-started","text":"Build the project with ./gradlew clean build . Start the database with docker-compose up . Launch the application with ./gradlew bootRun --args='--spring.profiles.active=test,jpa,postgres' . Play use cases with Postman using this default collection or with Swagger UI .","title":"Getting started"},{"location":"#this-documentation","text":"Powered by MkDocs API documentation powered by Swagger UI Architecture documentation powered by Structurizr and AppMap","title":"This documentation"},{"location":"architecture/","text":"Architecture \u00b6 C4 \u00b6 System context Container view Component view AppMap \u00b6 E2E from API layer E2E from Service layer E2E from Data layer Hexagonal \u00b6 The logical layers are organized like an onion with the domain layer at the center. Infrastructure layer adapts the output ports exposed by the application and domain layers. Web layer consumes input ports exposed by the application layer. Application layer acts as a use case orchestrator and consumes input ports exposed by the domain layer. Models are segregated and mapped between the different layers. ACL is used to protect the internal ubiquitous language from external languages. Domain model \u00b6 Data model \u00b6","title":"Architecture"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/#c4","text":"System context Container view Component view","title":"C4"},{"location":"architecture/#appmap","text":"E2E from API layer E2E from Service layer E2E from Data layer","title":"AppMap"},{"location":"architecture/#hexagonal","text":"The logical layers are organized like an onion with the domain layer at the center. Infrastructure layer adapts the output ports exposed by the application and domain layers. Web layer consumes input ports exposed by the application layer. Application layer acts as a use case orchestrator and consumes input ports exposed by the domain layer. Models are segregated and mapped between the different layers. ACL is used to protect the internal ubiquitous language from external languages.","title":"Hexagonal"},{"location":"architecture/#domain-model","text":"","title":"Domain model"},{"location":"architecture/#data-model","text":"","title":"Data model"},{"location":"miscellaneous/","text":"Miscellaneous \u00b6 This documentation \u00b6 Build technical documentation with ./gradlew allureAggregateReport plantumlAll generateSwaggerUI mkdocsBuild . AppMap resources \u00b6 Generate AppMap resources with ./gradlew appmap test . View your local AppMap resources following this tutorial . Release \u00b6 Draft new release of the application from GitHub release panel . Test users \u00b6 test / test gives access to almost all endpoints but the delete and shutdown ones. admin / admin gives access to all functional and configured application management endpoints. Spring profiles \u00b6 dev defines credentials and access control for test and admin users. test defines credentials and access control for anonymous , test and admin users. jpa enables persistence with relational database using JPA interface. postgres configure datasource to use a local database running on port 5432.","title":"Miscellaneous"},{"location":"miscellaneous/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"miscellaneous/#this-documentation","text":"Build technical documentation with ./gradlew allureAggregateReport plantumlAll generateSwaggerUI mkdocsBuild .","title":"This documentation"},{"location":"miscellaneous/#appmap-resources","text":"Generate AppMap resources with ./gradlew appmap test . View your local AppMap resources following this tutorial .","title":"AppMap resources"},{"location":"miscellaneous/#release","text":"Draft new release of the application from GitHub release panel .","title":"Release"},{"location":"miscellaneous/#test-users","text":"test / test gives access to almost all endpoints but the delete and shutdown ones. admin / admin gives access to all functional and configured application management endpoints.","title":"Test users"},{"location":"miscellaneous/#spring-profiles","text":"dev defines credentials and access control for test and admin users. test defines credentials and access control for anonymous , test and admin users. jpa enables persistence with relational database using JPA interface. postgres configure datasource to use a local database running on port 5432.","title":"Spring profiles"},{"location":"testing/","text":"Testing \u00b6 Getting started \u00b6 Launch the whole tests suite with ./gradlew clean check . Unit and integration testing \u00b6 Launch the unit and integration tests with ./gradlew test . Record component interaction scenarios with ./gradlew appmap test . Acceptance testing \u00b6 Launch the acceptance tests with ./gradlew acceptanceTest . Contract testing \u00b6 Launch the contract tests with ./gradlew contractTest . Architecture testing \u00b6 Launch the architecture tests with ./gradlew archTest . Reporting \u00b6 Acceptance scenarios Acceptance test Contract tests Unit and integration tests Architecture tests","title":"Testing"},{"location":"testing/#testing","text":"","title":"Testing"},{"location":"testing/#getting-started","text":"Launch the whole tests suite with ./gradlew clean check .","title":"Getting started"},{"location":"testing/#unit-and-integration-testing","text":"Launch the unit and integration tests with ./gradlew test . Record component interaction scenarios with ./gradlew appmap test .","title":"Unit and integration testing"},{"location":"testing/#acceptance-testing","text":"Launch the acceptance tests with ./gradlew acceptanceTest .","title":"Acceptance testing"},{"location":"testing/#contract-testing","text":"Launch the contract tests with ./gradlew contractTest .","title":"Contract testing"},{"location":"testing/#architecture-testing","text":"Launch the architecture tests with ./gradlew archTest .","title":"Architecture testing"},{"location":"testing/#reporting","text":"Acceptance scenarios Acceptance test Contract tests Unit and integration tests Architecture tests","title":"Reporting"}]}